[package]
name = "app-surface"
authors = ["jinleili"]
description = "Integrate wgpu into your existing iOS, Android and Web apps without relying on winit."
edition = "2021"
version = "1.3.1"
rust-version = "1.76"
repository = "https://github.com/jinleili/wgpu-in-app"
keywords = ["android", "SurfaceView", "CAMetalLayer", "Canvas", "wgpu"]
license = "MIT"

[lib]
crate-type = ["rlib"]

[features]
default = []
webgl = ["wgpu/webgl"]
mac_catalyst = []
# Use Canvas / OffscreenCanvas + raw-window-handle directly on the web, no need for winit
web_rwh = []

[dependencies]
cfg-if.workspace = true
log.workspace = true
glam.workspace = true
pollster.workspace = true
wgpu.workspace = true
web-sys = { workspace = true, features = [
    "Document",
    "Window",
    "Location",
    "HtmlCanvasElement",
    "OffscreenCanvas",
], optional = true }
wasm-bindgen = { workspace = true, optional = true }

[target.'cfg(any(target_os = "macos", target_os = "windows", target_os = "linux"))'.dependencies]
winit.workspace = true

[target.'cfg(any(target_os = "macos", target_os = "ios"))'.dependencies]
libc.workspace = true
objc.workspace = true
core-graphics.workspace = true
env_logger.workspace = true
raw-window-handle.workspace = true

[target.'cfg(target_os = "android")'.dependencies]
android_logger.workspace = true
jni.workspace = true
ndk-sys.workspace = true
raw-window-handle.workspace = true
ash.workspace = true

[target.'cfg(target_arch = "wasm32")'.dependencies]
winit.workspace = true
web-sys = { workspace = true }
wasm-bindgen.workspace = true
web-time.workspace = true
raw-window-handle.workspace = true
